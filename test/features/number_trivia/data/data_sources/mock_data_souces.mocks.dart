// Mocks generated by Mockito 5.4.4 from annotations
// in clean_architecture/test/features/number_trivia/data/data_sources/mock_data_souces.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:clean_architecture/features/number_trivia/data/models/number_trivia_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'mock_data_souces.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNumberTriviaModel_0 extends _i1.SmartFake
    implements _i2.NumberTriviaModel {
  _FakeNumberTriviaModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TestNetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestNetworkInfo extends _i1.Mock implements _i3.TestNetworkInfo {
  MockTestNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [TestNumberTriviaLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestNumberTriviaLocalSource extends _i1.Mock
    implements _i3.TestNumberTriviaLocalSource {
  MockTestNumberTriviaLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NumberTriviaModel?> getCachedNumberTrivia() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedNumberTrivia,
          [],
        ),
        returnValue: _i4.Future<_i2.NumberTriviaModel?>.value(),
      ) as _i4.Future<_i2.NumberTriviaModel?>);

  @override
  _i4.Future<bool> cacheNumberTrivia(_i2.NumberTriviaModel? trivia) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheNumberTrivia,
          [trivia],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [TestNumberTriviaRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestNumberTriviaRemoteSource extends _i1.Mock
    implements _i3.TestNumberTriviaRemoteSource {
  MockTestNumberTriviaRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.NumberTriviaModel> getConcreteNumberTrivia(int? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConcreteNumberTrivia,
          [number],
        ),
        returnValue:
            _i4.Future<_i2.NumberTriviaModel>.value(_FakeNumberTriviaModel_0(
          this,
          Invocation.method(
            #getConcreteNumberTrivia,
            [number],
          ),
        )),
      ) as _i4.Future<_i2.NumberTriviaModel>);

  @override
  _i4.Future<_i2.NumberTriviaModel> getRandomNumberTrivia() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomNumberTrivia,
          [],
        ),
        returnValue:
            _i4.Future<_i2.NumberTriviaModel>.value(_FakeNumberTriviaModel_0(
          this,
          Invocation.method(
            #getRandomNumberTrivia,
            [],
          ),
        )),
      ) as _i4.Future<_i2.NumberTriviaModel>);
}
